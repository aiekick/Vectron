	auto app = FPaths::GameContentDir() + "vf.fga";
	FString res;
	FFileHelper::LoadFileToString(res, *app);

	auto appOut = FPaths::GameContentDir() + "vfnew.fga";
	FFileHelper::SaveStringToFile(res, *appOut);

----------------------------------------------------------------------------------------------------------------------------------------------------------------

	FAssetRegistryModule& AssetRegistryModule = FModuleManager::LoadModuleChecked<FAssetRegistryModule>("AssetRegistry");
	TArray<FAssetData> AssetData;
	const UClass* Class = UStaticMesh::StaticClass();
	//FVectorFieldInstance f;
	auto cn = UVectorFieldStatic::StaticClass()->GetName();
	AssetRegistryModule.Get().GetAssetsByClass(*cn, AssetData);
	for (auto v : AssetData) {
		DLOG(v.PackagePath.ToString());
		DLOG(v.AssetName.ToString());
		v.PrintAssetData();
		auto byteData = &Cast<UVectorFieldStatic>(v.GetAsset())->SourceData;
		DLOGN(byteData->GetBulkDataSize());
		DLOG(byteData->GetFilename());

----------------------------------------------------------------------------------------------------------------------------------------------------------------

	auto world = GEditor->GetEditorWorldContext().World();
	auto level = world->GetCurrentLevel();
	auto actor = GEditor->AddActor(level, AVectorFieldVolume::StaticClass(), FTransform::Identity);
	auto vol = Cast<AVectorFieldVolume>(actor);

----------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Find selected object in content browser

	FEditorDelegates::LoadSelectedAssetsIfNeeded.Broadcast();

	USelection *Selection = GEditor->GetSelectedObjects();
	check(Selection != NULL);
	UObject *SelectedActor = Selection->GetTop<UObject>();

----------------------------------------------------------------------------------------------------------------------------------------------------------------

	UVectorFieldStatic* VectorField = NULL;
	VectorField = CastChecked<UVectorFieldStatic>(StaticConstructObject(
		UVectorFieldStatic::StaticClass()));
	VectorField->SizeX = m_escrowFga->GridX;
	VectorField->SizeY = m_escrowFga->GridY;
	VectorField->SizeZ = m_escrowFga->GridZ;
	VectorField->Bounds = m_escrowFga->Bounds;

	// SourceFilePath, Timestamp

	const int32 VectorCount = m_escrowFga->Vectors.Num();
	const int32 DestBufferSize = VectorCount * sizeof(FFloat16Color);
	VectorField->SourceData.Lock(LOCK_READ_WRITE);
	FFloat16Color* RESTRICT DestValues = (FFloat16Color*)VectorField->SourceData.Realloc(DestBufferSize);
	const FVector* RESTRICT SrcValues = m_escrowFga->Vectors.GetData();
	for (int32 VectorIndex = 0; VectorIndex < VectorCount; ++VectorIndex)
	{
		DestValues->R = SrcValues->X;
		DestValues->G = SrcValues->Y;
		DestValues->B = SrcValues->Z;
		DestValues->A = 0.0f;
		DestValues++;
		SrcValues++;
	}
	VectorField->SourceData.Unlock();
	VectorField->InitResource();
	m_vectorField = VectorField;

	auto World = GEditor->GetEditorWorldContext().World();
	auto Level = World->GetCurrentLevel();
	auto actor = GEditor->AddActor(Level, AVectorFieldVolume::StaticClass(), FTransform::Identity);
	auto vol = Cast<AVectorFieldVolume>(actor);
	vol->VectorFieldComponent->VectorField = VectorField;